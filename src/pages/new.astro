---
import type { APIRoute } from "astro";
import WorkCard from "../components/WorkCard.astro";
import BaseLayout from "../layouts/BaseLayout.astro";

const response = await fetch("https://opensheet.elk.sh/1ge-pyzr0uMTxlALiiUh_sEzdVo1ikGJGavLF04u6AVU/4");
const data = await response.json();

export const GET: APIRoute = () => {
  return new Response(
    JSON.stringify({
      message: "This was a GET!",
    })
  );
};

const filterData = (data:any, isUrgent) =>
  data.filter((item:any) => item.完成状态 === "未完成" && (isUrgent ? item.急单 === "急" : item.急单 !== "急"))
      .map((item:any) => ({
        workorder: item.工单号,
        name: item.申请人,
        works: item.治具名称,
        startdate: item.申请日期,
        enddate: item.需求日期,
        priority: item.急单,
      }));

const filteredData = filterData(data, true);
const filteredData2 = filterData(data, false);

const allFilteredData = [...filteredData, ...filteredData2];

const sortByEndDate = (a, b) => new Date(a.enddate) - new Date(b.enddate);
const sortByPriority = (a, b) => (b.priority === "急" ? 1 : -1);

const sortedByEndDate = [...allFilteredData].sort(sortByEndDate);
const sortedByPriority = [...allFilteredData].sort(sortByPriority);

if (!data) {
  return {
    status: 404,
  };
}
---

<BaseLayout>
  <div class="container mx-auto px-4">
    <div class="mb-4">
      <button id="toggleSort" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        切换排序: <span id="sortMethod">优先级</span>
      </button>
    </div>
    <main id="taskList" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-2">
      {sortedByPriority.map((data: any) => (
        <WorkCard data={data} />
      ))}
    </main>
  </div>

  <script define:vars={{ sortedByEndDate, sortedByPriority }}>
    let currentSort = 'priority';

    function renderTasks(tasks) {
      const taskList = document.getElementById('taskList');
      taskList.innerHTML = '';
      tasks.forEach(task => {
        const card = document.createElement('work-card');
        card.dataset.workorder = task.workorder;
        card.dataset.name = task.name;
        card.dataset.works = task.works;
        card.dataset.startdate = task.startdate;
        card.dataset.enddate = task.enddate;
        card.dataset.priority = task.priority;
        taskList.appendChild(card);
      });
    }

    document.getElementById('toggleSort').addEventListener('click', () => {
      const sortMethod = document.getElementById('sortMethod');
      if (currentSort === 'priority') {
        currentSort = 'enddate';
        sortMethod.textContent = '截止日期';
        renderTasks(sortedByEndDate);
      } else {
        currentSort = 'priority';
        sortMethod.textContent = '优先级';
        renderTasks(sortedByPriority);
      }
    });

    class WorkCard extends HTMLElement {
      connectedCallback() {
        const data = {
          workorder: this.dataset.workorder,
          name: this.dataset.name,
          works: this.dataset.works,
          startdate: this.dataset.startdate,
          enddate: this.dataset.enddate,
          priority: this.dataset.priority,
        };

        const startDate = new Date(data.startdate);
        const endDate = new Date(data.enddate);
        const timeDifference = endDate.getTime() - startDate.getTime();
        const dayDifference = timeDifference / (1000 * 3600 * 24);
        const currentDate = new Date();
        const overdue = endDate < currentDate;
        // const cardStyle = (dayDifference < 3) || overdue ? 'bg-red-200 mx-3' : 'bg-green-200 ';

        const cardBaseStyle = 'card border border-gray-300 rounded p-2.5 m-2.5 text-black';
const cardDynamicStyle = (dayDifference < 3) || overdue ? 'bg-red-200' : 'bg-green-200';
const cardStyle = `${cardBaseStyle} ${cardDynamicStyle}`;


        const showLogo = data.priority === "急";

        this.innerHTML = `
          <div class="card ${cardStyle} shadow-md hover:shadow-xl transition-shadow duration-300 relative">
           ${showLogo ? '<div class="absolute top-0 right-0 m-1 logo-container"><img src="logo23.svg" alt="Logo" width="60" height="60" class="logo-red" /></div>' : ''}
            <div class="title font-bold mb-2">申请人: ${data.name}</div>
            <div>申请日期: ${startDate.toLocaleDateString()}</div>
            <div>需求日期: ${endDate.toLocaleDateString()}</div>
            <div>工单号码: ${data.workorder}</div>
            <div>任务内容: ${data.works}</div>
          </div>
        `;

        const style = document.createElement('style');
        style.textContent = `
  .logo-red {
    filter: invert(24%) sepia(87%) saturate(7474%) hue-rotate(359deg) brightness(102%) contrast(104%);
  }
`;
document.head.appendChild(style);




      }
    }

    customElements.define('work-card', WorkCard);
  </script>
</BaseLayout>
